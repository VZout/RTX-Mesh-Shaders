#version 450

#include "pbr+_util.glsl"

layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0) uniform samplerCube t_input;
layout(set = 1, binding = 1, rgba8) uniform writeonly imageCube t_output;

layout(push_constant) uniform PushConstants {
    float roughness;
    float face;
} settings;

mat4 perspective(float fovy, float aspect, float zNear, float zFar)
{
    float rad = fovy;
    float tanHalfFovy = tan(rad / 2.f);

    mat4 result = mat4(0);
    result[0][0] = 1.f / (aspect * tanHalfFovy);
    result[1][1] = 1.f / (tanHalfFovy);
    result[2][2] = - (zFar + zNear) / (zFar - zNear);
    result[2][3] = - 1.f;
    result[3][2] = - (2.f * zFar * zNear) / (zFar - zNear);
    return result;
}

mat4 look_at(vec3 eye, vec3 center, vec3 up)
{
    vec3 f = vec3(normalize(center - eye));
    vec3 s = vec3(normalize(cross(f, up)));
    vec3 u = vec3(cross(s, f));

    mat4 result = mat4(1);
    result[0][0] = s.x;
    result[1][0] = s.y;
    result[2][0] = s.z;
    result[0][1] = u.x;
    result[1][1] = u.y;
    result[2][1] = u.z;
    result[0][2] =-f.x;
    result[1][2] =-f.y;
    result[2][2] =-f.z;
    result[3][0] =-dot(s, eye);
    result[3][1] =-dot(u, eye);
    result[3][2] = dot(f, eye);

    return result;
}

#define SAMPLE_COUNT 1024u

void main()
{
    uint face = uint(settings.face);

    vec3 view_dir = vec3(0);
    vec3 view_up = vec3(0, 1, 0);
    if (face == 0)
    {
        view_dir = vec3(1, 0, 0);
    }
    else if (face == 1)
    {
        view_dir = vec3(-1, 0, 0); // back
    }
    else if (face == 2)
    {
        view_dir = vec3(0, -1, 0); // top
        view_up = vec3(0, 0, -1);
    }
    else if (face == 3)
    {
        view_dir = vec3(0, 1, 0); // bottom
        view_up = vec3(0, 0, 1);
    }
    else if (face == 4) // right
    {
        view_dir = vec3(0, 0, -1);
    }
    else if (face == 5) // left
    {
        view_dir = vec3(0, 0, 1);
    }

    const float resolution = imageSize(t_output).x;
    const vec2 inUV = (vec2(gl_GlobalInvocationID.xy + 0.5f) / resolution);
    vec2 d = inUV * 2.0 - 1.0;

    mat4 persp = perspective(1.5708f, resolution / resolution, 1.f, 100.f);
    mat4 view = look_at(vec3(0, 0, 0), view_dir, view_up);

    vec4 target = inverse(persp) * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = inverse(view) * vec4(normalize(target.xyz), 0);

    // For readability.
    float roughness = settings.roughness;
    vec3 R = normalize(direction.xyz);
    vec3 N = R;
    vec3 V = R;

    float total_weight = 0.0f;
    vec3 color = vec3(0.0f);
    for (uint i = 0u; i < SAMPLE_COUNT; i++)
    {
        vec2 Xi = Hammersley2D(i, SAMPLE_COUNT);
        vec3 H = ImportanceSample_GGX(Xi, roughness, N);
        vec3 L = 2.0 * dot(V, H) * H - V;
        float NdotL = clamp(dot(N, L), 0, 1);

        if (NdotL > 0.0)
        {
            // Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

            float NdotH = clamp(dot(N, H), 0.0, 1.0);
            float VdotH = clamp(dot(H, V), 0.0, 1.0);

            // Probability Distribution Function
            #ifdef PBR_PLUS
            float pdf = D_GGX(NdotH, roughness, N, H) * NdotH / (4.0 * VdotH) + 0.0001;
            #else
            float pdf = D_GGX(NdotH, roughness) * NdotH / (4.0 * VdotH) + 0.0001;
            #endif
            // Slid angle of current smple
            float omega_s = 1.0 / (float(SAMPLE_COUNT) * pdf +  + 0.0001f);
            // Solid angle of 1 pixel across all cube faces
            float omega_p = 4.0 * M_PI / (6.0 * resolution * resolution);
            // Biased (+1.0) mip level for better result
            float mip_level = roughness == 0.0 ? 0.0 : max(0.5 * log2(omega_s / omega_p) + 1, 0.0f);
            color += textureLod(t_input, L, mip_level).rgb * NdotL;
            total_weight += NdotL;
        }
    }

    color = color / total_weight;

    imageStore(t_output, ivec3(gl_GlobalInvocationID.xy, settings.face), vec4(color.xyz, 1.f));
}
