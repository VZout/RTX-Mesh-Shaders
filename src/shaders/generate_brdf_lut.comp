#version 450

#include "pbr+_util.glsl"
#undef ANISO

#define NUM_SAMPLES 1024u

layout (local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba8) uniform writeonly image2D t_output;

float Visibility(float NoV, float NoL, float a) {
    // Heitz 2014, "Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs"
    // Height-correlated GGX
    const float a2 = a * a;
    const float GGXL = NoV * sqrt((NoL - NoL * a2) * NoL + a2);
    const float GGXV = NoL * sqrt((NoV - NoV * a2) * NoV + a2);
    return 0.5f / (GGXV + GGXL);
}

vec3 hemisphereImportanceSampleDggx(vec2 u, float a) { // pdf = D(a) * cosTheta
    const float phi = 2.0f * M_PI * u.x;
    // NOTE: (aa-1) == (a-1)(a+1) produces better fp accuracy
    const float cosTheta2 = (1.f - u.y) / (1.f + (a + 1.f) * ((a - 1.f) * u.y));
    const float cosTheta = sqrt(cosTheta2);
    const float sinTheta = sqrt(1.f - cosTheta2);
    return vec3( sinTheta * cos(phi), sinTheta * sin(phi), cosTheta );
}

vec2 hammersley(uint i, float iN) {
    float tof = 0.5f / 0x80000000U;
    uint bits = i;
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return vec2( i * iN, bits * tof );
}

vec2 DVF(float NdotV, float roughness)
{
    // Normal always points along z-axis for the 2D lookup
    const vec3 N = vec3(0.0, 0.0, 1.0);
    vec3 V = vec3(0.f);
    V.x = sqrt(1.0f - NdotV * NdotV);
    V.y = 0.f;
    V.z = NdotV;

    vec2 lut = vec2(0.f);
    for(uint i = 0u; i < NUM_SAMPLES; i++)
    {
        vec2 Xi = hammersley(i, 1.0f / NUM_SAMPLES);
        vec3 H = hemisphereImportanceSampleDggx(Xi, roughness);
        vec3 L = 2.0 * dot(V, H) * H - V;

        float VdotH = clamp(dot(V, H), 0.f, 1.f);
        float NdotL = clamp(L.z, 0.f, 1.f);
        float NdotH = clamp(H.z, 0.f, 1.f);

        if (NdotL > 0.0f)
        {
            //float G = GDFG(NdotV, NdotL, roughness);
            //float Gv = G * VdotH / NdotH;
            float Gv = Visibility(NdotV, NdotL, roughness) * NdotL * (VdotH / NdotH);
            const float Fc = pow5(1 - VdotH);
            lut.x += Gv * (1.0f - Fc);
            lut.y += Gv * Fc;
        }
    }

    return lut * (4.f / float(NUM_SAMPLES));
}

void main()
{
    const ivec2 resolution = imageSize(t_output);
    const float roughness = clamp((resolution.y - gl_GlobalInvocationID.y + 0.5f) / resolution.y, 0, 1);
    float linear_roughness = roughness * roughness;
    const float NoV = clamp((gl_GlobalInvocationID.x + 0.5f) / resolution.x, 0.f, 1.f);

    imageStore(t_output, ivec2(gl_GlobalInvocationID), vec4(DVF(NoV, linear_roughness), 0, 1.f));
}
